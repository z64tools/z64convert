WARNING:objex.OBJEX_OT_export.execute: Scene uses display_device='sRGB' which changes how colors are displayed in the viewport, reducing the preview accuracy.
This can be changed under Color Management in Scene properties.
Note that this should also be kept consistent with the Color Space property of image texture nodes (display_device="None", Color Space="Linear").
In Blender 2.7x, "Color Space" can be found in the Image Editor.
Recommended value: None
INFO:objex.OBJEX_OT_export.progress_report_print:   (  0.0010 sec |   0.0000 sec) Objex Export path: 'C:\\Users\\zelda\\Desktop\\TPLink64Deluxe.objex'
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Bottle.Hand.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0050 sec |   0.0030 sec) Finished writing geometry of 'Bottle.Hand.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Hookshot.Aiming.Reticule, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0090 sec |   0.0030 sec) Finished writing geometry of 'Hookshot.Aiming.Reticule'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Gauntlet.Hand.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0130 sec |   0.0030 sec) Finished writing geometry of 'Gauntlet.Hand.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Gauntlet.Fist.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0180 sec |   0.0030 sec) Finished writing geometry of 'Gauntlet.Fist.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Gauntlet.Forearm.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0220 sec |   0.0020 sec) Finished writing geometry of 'Gauntlet.Forearm.R'.
WARNING:objex.ObjexWriter.write_object: Mesh Hookshot.Spike is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0270 sec |   0.0050 sec) Finished writing geometry of 'Hookshot.Spike'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating FPS.Hand.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0360 sec |   0.0070 sec) Finished writing geometry of 'FPS.Hand.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating FPS.Forearm.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0440 sec |   0.0060 sec) Finished writing geometry of 'FPS.Forearm.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating FPS.Forearm.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0540 sec |   0.0070 sec) Finished writing geometry of 'FPS.Forearm.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating FPS.Hand.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0650 sec |   0.0090 sec) Finished writing geometry of 'FPS.Hand.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Bow.String, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0680 sec |   0.0020 sec) Finished writing geometry of 'Bow.String'.
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0690 sec |   0.0000 sec) Finished writing geometry of 'Link'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Broken.Blade.3, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0730 sec |   0.0030 sec) Finished writing geometry of 'Broken.Blade.3'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh Kokiri.Neck is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0810 sec |   0.0070 sec) Finished writing geometry of 'Kokiri.Neck'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh Kokiri is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1000 sec |   0.0180 sec) Finished writing geometry of 'Kokiri'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh FPS.Hookshot is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1050 sec |   0.0040 sec) Finished writing geometry of 'FPS.Hookshot'.
WARNING:objex.ObjexWriter.write_object: Mesh riggedmesh is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1290 sec |   0.0240 sec) Finished writing geometry of 'riggedmesh'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Sheath.Kokiri, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1330 sec |   0.0030 sec) Finished writing geometry of 'Sheath.Kokiri'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh Hilt.1 is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1420 sec |   0.0080 sec) Finished writing geometry of 'Hilt.1'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Blade.1, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1460 sec |   0.0030 sec) Finished writing geometry of 'Blade.1'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh Hilt.3 is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1530 sec |   0.0060 sec) Finished writing geometry of 'Hilt.3'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Blade.3, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1590 sec |   0.0050 sec) Finished writing geometry of 'Blade.3'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Shield.3, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1640 sec |   0.0040 sec) Finished writing geometry of 'Shield.3'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh Boomerang is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1740 sec |   0.0090 sec) Finished writing geometry of 'Boomerang'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh Sheath is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1800 sec |   0.0050 sec) Finished writing geometry of 'Sheath'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Fist.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1850 sec |   0.0040 sec) Finished writing geometry of 'Fist.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Foot.3.R, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1910 sec |   0.0050 sec) Finished writing geometry of 'Foot.3.R'.
WARNING:objex.ObjexWriter.write_object: Mesh Foot.2.R is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.1980 sec |   0.0060 sec) Finished writing geometry of 'Foot.2.R'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Foot.3.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2020 sec |   0.0030 sec) Finished writing geometry of 'Foot.3.L'.
WARNING:objex.ObjexWriter.write_object: Mesh Foot.2.L is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2110 sec |   0.0070 sec) Finished writing geometry of 'Foot.2.L'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh Bow is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2190 sec |   0.0070 sec) Finished writing geometry of 'Bow'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Shield.1, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2260 sec |   0.0040 sec) Finished writing geometry of 'Shield.1'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Hilt.2, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2360 sec |   0.0090 sec) Finished writing geometry of 'Hilt.2'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh Blade.2 is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2420 sec |   0.0050 sec) Finished writing geometry of 'Blade.2'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Gauntlet.Hand.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2450 sec |   0.0030 sec) Finished writing geometry of 'Gauntlet.Hand.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Gauntlet.Fist.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2490 sec |   0.0030 sec) Finished writing geometry of 'Gauntlet.Fist.L'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Fist.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2540 sec |   0.0030 sec) Finished writing geometry of 'Fist.L'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Hookshot, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2610 sec |   0.0060 sec) Finished writing geometry of 'Hookshot'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh Shield.2 is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2660 sec |   0.0040 sec) Finished writing geometry of 'Shield.2'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Gauntlet.Forearm.L, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2700 sec |   0.0030 sec) Finished writing geometry of 'Gauntlet.Forearm.L'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating Zora.Mask, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2760 sec |   0.0050 sec) Finished writing geometry of 'Zora.Mask'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh Sheath.Biggoron is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.2810 sec |   0.0050 sec) Finished writing geometry of 'Sheath.Biggoron'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh Goron is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.3060 sec |   0.0240 sec) Finished writing geometry of 'Goron'.
INFO:objex.ObjexWriter.write_object: Skipped modifier Displace which is down of the armature deform modifier
WARNING:objex.ObjexWriter.write_object: Mesh Zora is not triangulated and will be triangulated automatically (for exporting only).
Preview accuracy (UVs, shading, vertex colors) is improved by using a triangulated mesh.
Note: mesh has no triangulate modifier
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.3250 sec |   0.0180 sec) Finished writing geometry of 'Zora'.
INFO:objex.OBJEX_OT_export.progress_report_print:     (  0.3270 sec |   0.3260 sec) Finished exporting geometry, now exporting materials
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Hand.R' name_q='"empty.Hand.R"' material=bpy.data.materials['empty.Hand.R'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='nostrils' name_q='"nostrils"' material=bpy.data.materials['nostrils'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['nostrils.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['nostrils.png'] is packed, assuming it exists at //textures\nostrils.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='undershirt' name_q='"undershirt"' material=bpy.data.materials['undershirt'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['undershirt.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['undershirt.png'] is packed, assuming it exists at //textures\undershirt.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Forearm.R' name_q='"empty.Forearm.R"' material=bpy.data.materials['empty.Forearm.R'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='zoraFront' name_q='"zoraFront"' material=bpy.data.materials['zoraFront'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['zoraFront.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['zoraFront.png'] is packed, assuming it exists at //textures\zoraFront.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='magicPants' name_q='"magicPants"' material=bpy.data.materials['magicPants'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['pants.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['pants.png'] is packed, assuming it exists at //textures\pants.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='tabbardUpper' name_q='"tabbardUpper"' material=bpy.data.materials['tabbardUpper'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['tabbardUpper.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['tabbardUpper.png'] is packed, assuming it exists at //textures\tabbardUpper.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='front' name_q='"front"' material=bpy.data.materials['front'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_CCMUX_ENVIRONMENT': bpy.data...nodes["OBJEX_EnvColor"].outputs[0], 'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from bpy.data...nodes["OBJEX_EnvColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_EnvColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['front.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'shadeRGB': {'type': 'normals'}, 'environmentRGB': bpy.data...nodes["OBJEX_EnvColorRGB"].outputs[0].default_value}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['front.png'] is packed, assuming it exists at //textures\front.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='swordMaster' name_q='"swordMaster"' material=bpy.data.materials['swordMaster'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['swordMaster.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['swordMaster.png'] is packed, assuming it exists at //textures\swordMaster.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='strengthGauntletHand' name_q='"strengthGauntletHand"' material=bpy.data.materials['strengthGauntletHand'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_CCMUX_ENVIRONMENT': bpy.data...nodes["OBJEX_EnvColor"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0], 'G_ACMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[1]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from bpy.data...nodes["OBJEX_EnvColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_EnvColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from bpy.data...nodes["OBJEX_Texel0"].outputs[1] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['strengthGauntletHand.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'texel0A': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['strengthGauntletHand.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'environmentRGB': bpy.data...nodes["OBJEX_EnvColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['strengthGauntletHand.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} and texel0A {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['strengthGauntletHand.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} into texel0 {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['strengthGauntletHand.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['strengthGauntletHand.png'] is packed, assuming it exists at //textures\strengthGauntletHand.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='magicBack' name_q='"magicBack"' material=bpy.data.materials['magicBack'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['magicBack.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['magicBack.png'] is packed, assuming it exists at //textures\magicBack.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hat' name_q='"hat"' material=bpy.data.materials['hat'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_CCMUX_ENVIRONMENT': bpy.data...nodes["OBJEX_EnvColor"].outputs[0], 'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from bpy.data...nodes["OBJEX_EnvColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_EnvColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['hat.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'shadeRGB': {'type': 'normals'}, 'environmentRGB': bpy.data...nodes["OBJEX_EnvColorRGB"].outputs[0].default_value}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['hat.png'] is packed, assuming it exists at //textures\hat.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='swordOrdon' name_q='"swordOrdon"' material=bpy.data.materials['swordOrdon'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['swordOrdon.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['swordOrdon.png'] is packed, assuming it exists at //textures\swordOrdon.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Hookshot' name_q='"empty.Hookshot"' material=bpy.data.materials['empty.Hookshot'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='magicFoot' name_q='"magicFoot"' material=bpy.data.materials['magicFoot'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['magicFoot.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['magicFoot.png'] is packed, assuming it exists at //textures\magicFoot.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='ironBoot' name_q='"ironBoot"' material=bpy.data.materials['ironBoot'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['ironBoot.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['ironBoot.png'] is packed, assuming it exists at //textures\ironBoot.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Foot.L' name_q='"empty.Foot.L"' material=bpy.data.materials['empty.Foot.L'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Head' name_q='"empty.Head"' material=bpy.data.materials['empty.Head'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='shieldMirrorDecalUpper' name_q='"shieldMirrorDecalUpper"' material=bpy.data.materials['shieldMirrorDecalUpper'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_ACMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[1]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from bpy.data...nodes["OBJEX_Texel0"].outputs[1] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldMirrorDecalUpper.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'texel0A': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldMirrorDecalUpper.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldMirrorDecalUpper.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} and texel0A {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldMirrorDecalUpper.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} into texel0 {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldMirrorDecalUpper.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['shieldMirrorDecalUpper.png'] is packed, assuming it exists at //textures\shieldMirrorDecalUpper.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Shin.R' name_q='"empty.Shin.R"' material=bpy.data.materials['empty.Shin.R'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Hand.L' name_q='"empty.Hand.L"' material=bpy.data.materials['empty.Hand.L'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='shieldMirrorSurface' name_q='"shieldMirrorSurface"' material=bpy.data.materials['shieldMirrorSurface'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 0.015258800238370895, 'image': bpy.data.images['metal.png'], 'uv_mirror_v': False, 'texgen': True, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 0.15258799493312836, 'texgen_linear': True}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['metal.png'] is packed, assuming it exists at //textures\metal.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='reticle' name_q='"reticle"' material=bpy.data.materials['reticle'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[1], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_ACMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[1]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from bpy.data...nodes["OBJEX_PrimColor"].outputs[1] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from bpy.data...nodes["OBJEX_Texel0"].outputs[1] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['reticle.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveA': 1.0, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'texel0A': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['reticle.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged primitiveRGB bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value and primitiveA 1.0 into primitive (1.0, 0.0, 0.0, 1.0)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['reticle.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} and texel0A {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['reticle.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} into texel0 {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['reticle.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['reticle.png'] is packed, assuming it exists at //textures\reticle.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Shoulder.R' name_q='"empty.Shoulder.R"' material=bpy.data.materials['empty.Shoulder.R'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='gauntlet' name_q='"gauntlet"' material=bpy.data.materials['gauntlet'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['gauntlet.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['gauntlet.png'] is packed, assuming it exists at //textures\gauntlet.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='sheathBiggoron' name_q='"sheathBiggoron"' material=bpy.data.materials['sheathBiggoron'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['sheathBiggoron.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['sheathBiggoron.png'] is packed, assuming it exists at //textures\sheathBiggoron.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='shieldOrdonHandle' name_q='"shieldOrdonHandle"' material=bpy.data.materials['shieldOrdonHandle'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_CCMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='magicBoot' name_q='"magicBoot"' material=bpy.data.materials['magicBoot'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['magicBoot.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['magicBoot.png'] is packed, assuming it exists at //textures\magicBoot.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='pants' name_q='"pants"' material=bpy.data.materials['pants'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['pants.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture pants.png <bpy_struct, Image("pants.png")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='shieldMirrorCase' name_q='"shieldMirrorCase"' material=bpy.data.materials['shieldMirrorCase'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 0.03051760047674179, 'image': bpy.data.images['metal.png'], 'uv_mirror_v': False, 'texgen': True, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 0.022888200357556343, 'texgen_linear': True}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture metal.png <bpy_struct, Image("metal.png")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='bowstring' name_q='"bowstring"' material=bpy.data.materials['bowstring'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_CCMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='chainmail' name_q='"chainmail"' material=bpy.data.materials['chainmail'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['chainmail.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['chainmail.png'] is packed, assuming it exists at //textures\chainmail.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='shieldMirrorDecalLower' name_q='"shieldMirrorDecalLower"' material=bpy.data.materials['shieldMirrorDecalLower'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_ACMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[1]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from bpy.data...nodes["OBJEX_Texel0"].outputs[1] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldMirrorDecalLower.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'texel0A': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldMirrorDecalLower.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldMirrorDecalLower.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} and texel0A {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldMirrorDecalLower.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} into texel0 {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldMirrorDecalLower.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['shieldMirrorDecalLower.png'] is packed, assuming it exists at //textures\shieldMirrorDecalLower.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hoverBootLoop' name_q='"hoverBootLoop"' material=bpy.data.materials['hoverBootLoop'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['hoverBootLoop.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['hoverBootLoop.png'] is packed, assuming it exists at //textures\hoverBootLoop.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='shieldHylianFront' name_q='"shieldHylianFront"' material=bpy.data.materials['shieldHylianFront'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldHylianFront.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['shieldHylianFront.png'] is packed, assuming it exists at //textures\shieldHylianFront.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='zoraTunic' name_q='"zoraTunic"' material=bpy.data.materials['zoraTunic'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['zoraTunic.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['zoraTunic.png'] is packed, assuming it exists at //textures\zoraTunic.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hoverBoot' name_q='"hoverBoot"' material=bpy.data.materials['hoverBoot'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['hoverBoot.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['hoverBoot.png'] is packed, assuming it exists at //textures\hoverBoot.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='belt' name_q='"belt"' material=bpy.data.materials['belt'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['belt.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['belt.png'] is packed, assuming it exists at //textures\belt.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='nose' name_q='"nose"' material=bpy.data.materials['nose'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['nose.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['nose.png'] is packed, assuming it exists at //textures\nose.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hand' name_q='"hand"' material=bpy.data.materials['hand'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['hand.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['hand.png'] is packed, assuming it exists at //textures\hand.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='zoraSleeve' name_q='"zoraSleeve"' material=bpy.data.materials['zoraSleeve'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['zoraSleeve.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['zoraSleeve.png'] is packed, assuming it exists at //textures\zoraSleeve.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='boomerang' name_q='"boomerang"' material=bpy.data.materials['boomerang'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['boomerang.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['boomerang.png'] is packed, assuming it exists at //textures\boomerang.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='chainmailGold' name_q='"chainmailGold"' material=bpy.data.materials['chainmailGold'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['chainmail.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture chainmail.png <bpy_struct, Image("chainmail.png")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='boot' name_q='"boot"' material=bpy.data.materials['boot'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['boot.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['boot.png'] is packed, assuming it exists at //textures\boot.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='eyes' name_q='"eyes"' material=bpy.data.materials['eyes'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['eyes.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['eyes.png'] is packed, assuming it exists at //textures\eyes.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='bracer' name_q='"bracer"' material=bpy.data.materials['bracer'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['bracer.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['bracer.png'] is packed, assuming it exists at //textures\bracer.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='sleeve' name_q='"sleeve"' material=bpy.data.materials['sleeve'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_CCMUX_ENVIRONMENT': bpy.data...nodes["OBJEX_EnvColor"].outputs[0], 'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from bpy.data...nodes["OBJEX_EnvColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_EnvColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['sleeve.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'shadeRGB': {'type': 'normals'}, 'environmentRGB': bpy.data...nodes["OBJEX_EnvColorRGB"].outputs[0].default_value}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['sleeve.png'] is packed, assuming it exists at //textures\sleeve.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Thigh.R' name_q='"empty.Thigh.R"' material=bpy.data.materials['empty.Thigh.R'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='zoraGem' name_q='"zoraGem"' material=bpy.data.materials['zoraGem'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_ACMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[1]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from bpy.data...nodes["OBJEX_Texel0"].outputs[1] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['zoraGem.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'texel0A': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['zoraGem.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['zoraGem.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} and texel0A {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['zoraGem.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} into texel0 {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['zoraGem.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['zoraGem.png'] is packed, assuming it exists at //textures\zoraGem.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Thigh.L' name_q='"empty.Thigh.L"' material=bpy.data.materials['empty.Thigh.L'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='tunic' name_q='"tunic"' material=bpy.data.materials['tunic'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_CCMUX_ENVIRONMENT': bpy.data...nodes["OBJEX_EnvColor"].outputs[0], 'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from bpy.data...nodes["OBJEX_EnvColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_EnvColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['tunic.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'shadeRGB': {'type': 'normals'}, 'environmentRGB': bpy.data...nodes["OBJEX_EnvColorRGB"].outputs[0].default_value}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['tunic.png'] is packed, assuming it exists at //textures\tunic.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='reflectiveRed' name_q='"reflectiveRed"' material=bpy.data.materials['reflectiveRed'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 0.03814699873328209, 'image': bpy.data.images['metal.png'], 'uv_mirror_v': False, 'texgen': True, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 0.03051760047674179, 'texgen_linear': True}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture metal.png <bpy_struct, Image("metal.png")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='reflectiveGold' name_q='"reflectiveGold"' material=bpy.data.materials['reflectiveGold'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 0.03814699873328209, 'image': bpy.data.images['metal.png'], 'uv_mirror_v': False, 'texgen': True, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 0.03051760047674179, 'texgen_linear': True}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture metal.png <bpy_struct, Image("metal.png")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='clawshotChain' name_q='"clawshotChain"' material=bpy.data.materials['clawshotChain'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['clawshotChain.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['clawshotChain.png'] is packed, assuming it exists at //textures\clawshotChain.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='bow' name_q='"bow"' material=bpy.data.materials['bow'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['bow.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['bow.png'] is packed, assuming it exists at //textures\bow.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Forearm.L' name_q='"empty.Forearm.L"' material=bpy.data.materials['empty.Forearm.L'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='strengthGauntlet' name_q='"strengthGauntlet"' material=bpy.data.materials['strengthGauntlet'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_CCMUX_ENVIRONMENT': bpy.data...nodes["OBJEX_EnvColor"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0], 'G_ACMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[1]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from bpy.data...nodes["OBJEX_EnvColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_EnvColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from bpy.data...nodes["OBJEX_Texel0"].outputs[1] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['strengthGauntlet.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'texel0A': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['strengthGauntlet.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'environmentRGB': bpy.data...nodes["OBJEX_EnvColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['strengthGauntlet.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} and texel0A {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['strengthGauntlet.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} into texel0 {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['strengthGauntlet.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['strengthGauntlet.png'] is packed, assuming it exists at //textures\strengthGauntlet.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='biggoronHandleGuard' name_q='"biggoronHandleGuard"' material=bpy.data.materials['biggoronHandleGuard'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['biggoronHandleGuard.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['biggoronHandleGuard.png'] is packed, assuming it exists at //textures\biggoronHandleGuard.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hoverBootWing' name_q='"hoverBootWing"' material=bpy.data.materials['hoverBootWing'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_ACMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[1]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from bpy.data...nodes["OBJEX_Texel0"].outputs[1] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['hoverBootWing.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'texel0A': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['hoverBootWing.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['hoverBootWing.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} and texel0A {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['hoverBootWing.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} into texel0 {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['hoverBootWing.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['hoverBootWing.png'] is packed, assuming it exists at //textures\hoverBootWing.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Shoulder.L' name_q='"empty.Shoulder.L"' material=bpy.data.materials['empty.Shoulder.L'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='shieldOrdonFront' name_q='"shieldOrdonFront"' material=bpy.data.materials['shieldOrdonFront'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldOrdonFront.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['shieldOrdonFront.png'] is packed, assuming it exists at //textures\shieldOrdonFront.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='sheathOrdon' name_q='"sheathOrdon"' material=bpy.data.materials['sheathOrdon'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['sheathOrdon.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['sheathOrdon.png'] is packed, assuming it exists at //textures\sheathOrdon.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='foot' name_q='"foot"' material=bpy.data.materials['foot'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['foot.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['foot.png'] is packed, assuming it exists at //textures\foot.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Kokiri.Neck' name_q='"empty.Kokiri.Neck"' material=bpy.data.materials['empty.Kokiri.Neck'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='earring' name_q='"earring"' material=bpy.data.materials['earring'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_ACMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[1]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from bpy.data...nodes["OBJEX_Texel0"].outputs[1] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['earring.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'texel0A': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['earring.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['earring.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} and texel0A {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['earring.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False} into texel0 {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['earring.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['earring.png'] is packed, assuming it exists at //textures\earring.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='magicShoulder' name_q='"magicShoulder"' material=bpy.data.materials['magicShoulder'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['magicShoulder.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['magicShoulder.png'] is packed, assuming it exists at //textures\magicShoulder.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='glove' name_q='"glove"' material=bpy.data.materials['glove'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['glove.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['glove.png'] is packed, assuming it exists at //textures\glove.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='sheathMaster' name_q='"sheathMaster"' material=bpy.data.materials['sheathMaster'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['sheathMaster.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['sheathMaster.png'] is packed, assuming it exists at //textures\sheathMaster.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='ear' name_q='"ear"' material=bpy.data.materials['ear'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['ear.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['ear.png'] is packed, assuming it exists at //textures\ear.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.dummy' name_q='"empty.dummy"' material=bpy.data.materials['empty.dummy'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Shin.L' name_q='"empty.Shin.L"' material=bpy.data.materials['empty.Shin.L'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Foot.R' name_q='"empty.Foot.R"' material=bpy.data.materials['empty.Foot.R'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='shieldOrdonBack' name_q='"shieldOrdonBack"' material=bpy.data.materials['shieldOrdonBack'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldOrdonBack.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['shieldOrdonBack.png'] is packed, assuming it exists at //textures\shieldOrdonBack.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='reflective' name_q='"reflective"' material=bpy.data.materials['reflective'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 0.03814699873328209, 'image': bpy.data.images['metal.png'], 'uv_mirror_v': False, 'texgen': True, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 0.03051760047674179, 'texgen_linear': True}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
TRACE:objex.export_objex_mtl.writeTexture: Skipped writing texture metal.png <bpy_struct, Image("metal.png")>
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Kokiri.Head' name_q='"empty.Kokiri.Head"' material=bpy.data.materials['empty.Kokiri.Head'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='shieldHylianHandle' name_q='"shieldHylianHandle"' material=bpy.data.materials['shieldHylianHandle'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_CCMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='tabbardLower' name_q='"tabbardLower"' material=bpy.data.materials['tabbardLower'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['tabbardLower.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['tabbardLower.png'] is packed, assuming it exists at //textures\tabbardLower.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='mouth' name_q='"mouth"' material=bpy.data.materials['mouth'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['mouth.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['mouth.png'] is packed, assuming it exists at //textures\mouth.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='shieldHylianBack' name_q='"shieldHylianBack"' material=bpy.data.materials['shieldHylianBack'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['shieldHylianBack.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['shieldHylianBack.png'] is packed, assuming it exists at //textures\shieldHylianBack.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='collar' name_q='"collar"' material=bpy.data.materials['collar'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['collar.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['collar.png'] is packed, assuming it exists at //textures\collar.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Collar' name_q='"empty.Collar"' material=bpy.data.materials['empty.Collar'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='clawshot' name_q='"clawshot"' material=bpy.data.materials['clawshot'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['clawshot.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['clawshot.png'] is packed, assuming it exists at //textures\clawshot.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='back' name_q='"back"' material=bpy.data.materials['back'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_CCMUX_ENVIRONMENT': bpy.data...nodes["OBJEX_EnvColor"].outputs[0], 'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from bpy.data...nodes["OBJEX_EnvColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_EnvColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['back.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'shadeRGB': {'type': 'normals'}, 'environmentRGB': bpy.data...nodes["OBJEX_EnvColorRGB"].outputs[0].default_value}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['back.png'] is packed, assuming it exists at //textures\back.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='empty.Kokiri.Hat' name_q='"empty.Kokiri.Hat"' material=bpy.data.materials['empty.Kokiri.Hat'] face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='magicCollar' name_q='"magicCollar"' material=bpy.data.materials['magicCollar'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['magicCollar.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['magicCollar.png'] is packed, assuming it exists at //textures\magicCollar.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='zoraHat' name_q='"zoraHat"' material=bpy.data.materials['zoraHat'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['zoraHat.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['zoraHat.png'] is packed, assuming it exists at //textures\zoraHat.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='hair' name_q='"hair"' material=bpy.data.materials['hair'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['hair.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['hair.png'] is packed, assuming it exists at //textures\hair.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='biggoronHandle' name_q='"biggoronHandle"' material=bpy.data.materials['biggoronHandle'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': True, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['biggoronHandle.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': True, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['biggoronHandle.png'] is packed, assuming it exists at //textures\biggoronHandle.png
TRACE:objex.export_objex_mtl.write_mtl: Writing name='magicFront' name_q='"magicFront"' material=bpy.data.materials['magicFront'] face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_1': bpy.data...nodes["OBJEX_Color1"].outputs[0], 'G_ACMUX_0': bpy.data...nodes["OBJEX_Color0"].outputs[0], 'G_CCMUX_PRIMITIVE': bpy.data...nodes["OBJEX_PrimColor"].outputs[0], 'G_CCMUX_TEXEL0': bpy.data...nodes["OBJEX_Texel0"].outputs[0], 'G_CCMUX_SHADE': bpy.data...nodes["OBJEX_Shade"].outputs[0]}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveRGB from bpy.data...nodes["OBJEX_PrimColor"].outputs[0] (socket node: bpy.data...nodes["OBJEX_PrimColor"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from bpy.data...nodes["OBJEX_Texel0"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Texel0"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from bpy.data...nodes["OBJEX_Shade"].outputs[0] (socket node: bpy.data...nodes["OBJEX_Shade"])
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'texel0RGB': {'uv_scale_v': 0, 'uv_map': False, 'uv_mirror_u': False, 'uv_layer': '', 'uv_wrap_v': False, 'uv_scale_v_main': 1.0, 'image': bpy.data.images['magicFront.png'], 'uv_mirror_v': False, 'texgen': False, 'uv_scale_u': 0, 'uv_wrap_u': False, 'uv_scale_u_main': 1.0, 'texgen_linear': False}, 'primitiveRGB': bpy.data...nodes["OBJEX_PrimColorRGB"].outputs[0].default_value, 'shadeRGB': {'type': 'normals'}}
WARNING:objex.export_objex_mtl.getImagePath: Image bpy.data.images['magicFront.png'] is packed, assuming it exists at //textures\magicFront.png
INFO:objex.OBJEX_OT_export.progress_report_print:     (  0.6590 sec |   0.6580 sec) Finished exporting materials, now exporting skeletons/animations
INFO:objex.ObjexWriter.write: now exporting skeletons
INFO:objex.ObjexWriter.write:  ... and animations
INFO:objex.OBJEX_OT_export.progress_report_print:     (  0.6800 sec |   0.6790 sec) Objex Export Finished
